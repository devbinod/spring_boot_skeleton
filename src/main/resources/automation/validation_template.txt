package com.realestate.re.service.core.{packagename};

import com.realestate.re.service.common.abstracts.AbstractValidation;
import com.realestate.re.service.common.enums.Status;
import com.realestate.re.service.core.{packagename}.{entityname}Dto;
import com.realestate.re.service.core.{packagename}.{entityname}Error;
import com.realestate.re.service.core.{packagename}.{entityname}Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;

import java.util.List;

@Service
public class {entityname}Validation extends AbstractValidation<{entityname}Dto , {entityname}Error>{

    @Autowired
    private {entityname}Repository {K-entityname}Repository;

    private {entityname}Error error = null;

    @Override
    public {entityname}Error onSave({entityname}Dto dto, BindingResult result) {
        error = new {entityname}Error();

        boolean valid = true;

        if (dto == null){
            error.setValid(false);
            error.setMessage("Please fill the form");

            return error;
        }

        error = bindingValidation(result);

        if (!error.isValid()) {
            return error;
        }

        //write your code

        error.setValid(valid);

        return error;
    }

    @Override
    public {entityname}Error onUpdate({entityname}Dto dto, BindingResult result) {
        error = new {entityname}Error();

        boolean valid = true;

        if (dto == null){
            error.setValid(false);
            error.setMessage("Please fill the form");

            return error;
        }

        error = bindingValidation(result);

        if (!error.isValid()) {
            return error;
        }

        if (dto.getVersion() == null){
            dto.setVersion(0);
        }

        valid = validation{entityname}Id(dto.getId() , dto.getVersion());

        //write your code

        error.setValid(valid);

        return error;
    }

    @Override
    public {entityname}Error onDelete(Long {K-entityname}Id, Integer version) {
        error = new {entityname}Error();

        if (version == null){
            version = -1;
        }

        boolean valid = validation{entityname}Id({K-entityname}Id , version);

        error.setValid(valid);

        return error;
    }

    @Override
    public {entityname}Error bindingValidation(BindingResult result) {
        boolean valid = true;
        if (result.hasErrors()) {

            List<FieldError> errors = result.getFieldErrors();

            for (FieldError errorResult : errors) {

                //write your code
                /*if (errorResult.getField().equals("name")) {
                    error.setName("Invalid name");
                    valid = false;
                }*/
            }

        }
        error.setValid(valid);

        return error;
    }

    private boolean validation{entityname}Id(Long value , Integer version){
        error.setMessage(checkLong(value , 1 , "{entityname} Id" , true));

        if (isNotNull(error.getMessage())){
            return false;
        }

        if(version == null){
            version = 0;
        }

        {entityname} {K-entityname} = {K-entityname}Repository.findByStatusAndId(Status.ACTIVE , value );

        if ({K-entityname} == null){
            error.setMessage("Provided {entityname} Not Found");
            return false;
        }

        if ({K-entityname}.getVersion() != version){
            error.setMessage("Another User Already Updated !!");
            error.setVersionUnmatched(true);
            return false;
        }

        return true;
    }
}
